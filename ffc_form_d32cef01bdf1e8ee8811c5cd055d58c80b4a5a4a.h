// This code conforms with the UFC specification version 1.6.0
// and was automatically generated by FFC version 1.6.0.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __FFC_FORM_D32CEF01BDF1E8EE8811C5CD055D58C80B4A5A4A_H
#define __FFC_FORM_D32CEF01BDF1E8EE8811C5CD055D58C80B4A5A4A_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement(FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None), **{'value_shape': (4,) })";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 24;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 24; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 4; s++)
      {
        values[r*4 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 24; r++)
    {
      for (unsigned int s = 0; s < 4*num_derivatives; s++)
      {
        values[r*4*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[16];
    for (unsigned int r = 0; r < 16; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 24; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 4*num_derivatives; s++)
      {
        values[r*4*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[4];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 13:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 14:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 15:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 16:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 17:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 18:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 19:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 20:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 21:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 22:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 23:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[4];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[15] = vals[2];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[16] = vals[2];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[17] = vals[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[18] = vals[3];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[19] = vals[3];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[20] = vals[3];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[21] = vals[3];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[22] = vals[3];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[23] = vals[3];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[4] = dof_values[1];
    vertex_values[8] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[5] = dof_values[7];
    vertex_values[9] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[6] = dof_values[13];
    vertex_values[10] = dof_values[14];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[18];
    vertex_values[7] = dof_values[19];
    vertex_values[11] = dof_values[20];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 4;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_0();
        break;
      }
    case 1:
      {
        return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_0();
        break;
      }
    case 2:
      {
        return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_0();
        break;
      }
    case 3:
      {
        return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for MixedElement(FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None), **{'value_shape': (4,) })";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 4*num_global_entities[0] + 4*num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 24;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 12;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 4;
        break;
      }
    case 1:
      {
        return 4;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + c.entity_indices[1][0];
    dofs[10] = offset + c.entity_indices[1][1];
    dofs[11] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[12] = offset + c.entity_indices[0][0];
    dofs[13] = offset + c.entity_indices[0][1];
    dofs[14] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[15] = offset + c.entity_indices[1][0];
    dofs[16] = offset + c.entity_indices[1][1];
    dofs[17] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[18] = offset + c.entity_indices[0][0];
    dofs[19] = offset + c.entity_indices[0][1];
    dofs[20] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[21] = offset + c.entity_indices[1][0];
    dofs[22] = offset + c.entity_indices[1][1];
    dofs[23] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
      dofs[6] = 12;
      dofs[7] = 14;
      dofs[8] = 16;
      dofs[9] = 18;
      dofs[10] = 20;
      dofs[11] = 22;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
      dofs[6] = 12;
      dofs[7] = 13;
      dofs[8] = 17;
      dofs[9] = 18;
      dofs[10] = 19;
      dofs[11] = 23;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
        dofs[2] = 12;
        dofs[3] = 18;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
        dofs[2] = 13;
        dofs[3] = 19;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
        dofs[2] = 14;
        dofs[3] = 20;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
        dofs[2] = 15;
        dofs[3] = 21;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
        dofs[2] = 16;
        dofs[3] = 22;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
        dofs[2] = 17;
        dofs[3] = 23;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[12] = vertex_coordinates[0];
    dof_coordinates[13] = vertex_coordinates[1];
    dof_coordinates[14] = vertex_coordinates[2];
    dof_coordinates[15] = vertex_coordinates[3];
    dof_coordinates[16] = vertex_coordinates[4];
    dof_coordinates[17] = vertex_coordinates[5];
    dof_coordinates[18] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[19] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[20] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[21] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[22] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[23] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[24] = vertex_coordinates[0];
    dof_coordinates[25] = vertex_coordinates[1];
    dof_coordinates[26] = vertex_coordinates[2];
    dof_coordinates[27] = vertex_coordinates[3];
    dof_coordinates[28] = vertex_coordinates[4];
    dof_coordinates[29] = vertex_coordinates[5];
    dof_coordinates[30] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[31] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[32] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[33] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[34] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[35] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[36] = vertex_coordinates[0];
    dof_coordinates[37] = vertex_coordinates[1];
    dof_coordinates[38] = vertex_coordinates[2];
    dof_coordinates[39] = vertex_coordinates[3];
    dof_coordinates[40] = vertex_coordinates[4];
    dof_coordinates[41] = vertex_coordinates[5];
    dof_coordinates[42] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[43] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[44] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[45] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[46] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[47] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 4;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_0();
        break;
      }
    case 1:
      {
        return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_0();
        break;
      }
    case 2:
      {
        return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_0();
        break;
      }
    case 3:
      {
        return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_cell_integral_0_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_cell_integral_0_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    72
    // Number of operations (multiply-add pairs) for tensor contraction: 1025
    // Total number of operations (multiply-add pairs):                  1100
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_ = det;
    const double G1_ = det;
    const double G2_0_0 = det*K[0]*K[0]*(1.0);
    const double G2_0_1 = det*K[0]*K[2]*(1.0);
    const double G2_1_0 = det*K[2]*K[0]*(1.0);
    const double G2_1_1 = det*K[2]*K[2]*(1.0);
    const double G3_0_0 = det*K[1]*K[0]*(1.0);
    const double G3_0_1 = det*K[1]*K[2]*(1.0);
    const double G3_1_0 = det*K[3]*K[0]*(1.0);
    const double G3_1_1 = det*K[3]*K[2]*(1.0);
    const double G4_0_0 = det*K[0]*K[1]*(1.0);
    const double G4_0_1 = det*K[0]*K[3]*(1.0);
    const double G4_1_0 = det*K[2]*K[1]*(1.0);
    const double G4_1_1 = det*K[2]*K[3]*(1.0);
    const double G5_0_0 = det*K[1]*K[1]*(1.0);
    const double G5_0_1 = det*K[1]*K[3]*(1.0);
    const double G5_1_0 = det*K[3]*K[1]*(1.0);
    const double G5_1_1 = det*K[3]*K[3]*(1.0);
    const double G6_0 = det*w[0][0]*(1.0);
    const double G6_1 = det*w[0][1]*(1.0);
    const double G6_2 = det*w[0][2]*(1.0);
    const double G6_3 = det*w[0][3]*(1.0);
    const double G6_4 = det*w[0][4]*(1.0);
    const double G6_5 = det*w[0][5]*(1.0);
    const double G7_12 = det*w[0][12]*(1.0);
    const double G7_13 = det*w[0][13]*(1.0);
    const double G7_14 = det*w[0][14]*(1.0);
    const double G7_15 = det*w[0][15]*(1.0);
    const double G7_16 = det*w[0][16]*(1.0);
    const double G7_17 = det*w[0][17]*(1.0);
    const double G8_0_0 = det*K[0]*K[0]*(1.0);
    const double G8_0_1 = det*K[0]*K[2]*(1.0);
    const double G8_1_0 = det*K[2]*K[0]*(1.0);
    const double G8_1_1 = det*K[2]*K[2]*(1.0);
    const double G9_0_0 = det*K[0]*K[1]*(1.0);
    const double G9_0_1 = det*K[0]*K[3]*(1.0);
    const double G9_1_0 = det*K[2]*K[1]*(1.0);
    const double G9_1_1 = det*K[2]*K[3]*(1.0);
    const double G10_0_0 = det*K[1]*K[0]*(1.0);
    const double G10_0_1 = det*K[1]*K[2]*(1.0);
    const double G10_1_0 = det*K[3]*K[0]*(1.0);
    const double G10_1_1 = det*K[3]*K[2]*(1.0);
    const double G11_0_0 = det*K[1]*K[1]*(1.0);
    const double G11_0_1 = det*K[1]*K[3]*(1.0);
    const double G11_1_0 = det*K[3]*K[1]*(1.0);
    const double G11_1_1 = det*K[3]*K[3]*(1.0);
    const double G12_ = det;
    const double G13_6 = det*w[0][6]*(1.0);
    const double G13_7 = det*w[0][7]*(1.0);
    const double G13_8 = det*w[0][8]*(1.0);
    const double G13_9 = det*w[0][9]*(1.0);
    const double G13_10 = det*w[0][10]*(1.0);
    const double G13_11 = det*w[0][11]*(1.0);
    const double G14_6 = det*w[0][6]*(1.0);
    const double G14_7 = det*w[0][7]*(1.0);
    const double G14_8 = det*w[0][8]*(1.0);
    const double G14_9 = det*w[0][9]*(1.0);
    const double G14_10 = det*w[0][10]*(1.0);
    const double G14_11 = det*w[0][11]*(1.0);
    
    // Compute element tensor
    A[0] = 0.0166666666666668*G0_;
    A[1] = -0.0027777777777778*G0_;
    A[2] = -0.0027777777777778*G0_;
    A[3] = -0.011111111111111*G0_;
    A[4] = 0.0;
    A[5] = 0.0;
    A[6] = 0.0;
    A[7] = 0.0;
    A[8] = 0.0;
    A[9] = 0.0;
    A[10] = 0.0;
    A[11] = 0.0;
    A[12] = 0.0;
    A[13] = 0.0;
    A[14] = 0.0;
    A[15] = 0.0;
    A[16] = 0.0;
    A[17] = 0.0;
    A[18] = 0.500000000000004*G2_0_0 + 0.500000000000004*G2_0_1 + 0.500000000000004*G2_1_0 + 0.500000000000005*G2_1_1;
    A[19] = 0.166666666666669*G2_0_0 + 0.166666666666668*G2_1_0;
    A[20] = 0.166666666666668*G2_0_1 + 0.166666666666667*G2_1_1;
    A[21] = 0.0;
    A[22] = -0.666666666666673*G2_0_1 - 0.666666666666672*G2_1_1;
    A[23] = -0.666666666666673*G2_0_0 - 0.666666666666672*G2_1_0;
    A[24] = -0.00277777777777781*G0_;
    A[25] = 0.0166666666666668*G0_;
    A[26] = -0.00277777777777779*G0_;
    A[27] = 0.0;
    A[28] = -0.0111111111111111*G0_;
    A[29] = 0.0;
    A[30] = 0.0;
    A[31] = 0.0;
    A[32] = 0.0;
    A[33] = 0.0;
    A[34] = 0.0;
    A[35] = 0.0;
    A[36] = 0.0;
    A[37] = 0.0;
    A[38] = 0.0;
    A[39] = 0.0;
    A[40] = 0.0;
    A[41] = 0.0;
    A[42] = 0.166666666666669*G2_0_0 + 0.166666666666668*G2_0_1;
    A[43] = 0.500000000000003*G2_0_0;
    A[44] = -0.166666666666668*G2_0_1;
    A[45] = 0.666666666666667*G2_0_1;
    A[46] = 0.0;
    A[47] = -0.666666666666673*G2_0_0 - 0.66666666666667*G2_0_1;
    A[48] = -0.0027777777777778*G0_;
    A[49] = -0.00277777777777779*G0_;
    A[50] = 0.0166666666666668*G0_;
    A[51] = 0.0;
    A[52] = 0.0;
    A[53] = -0.0111111111111111*G0_;
    A[54] = 0.0;
    A[55] = 0.0;
    A[56] = 0.0;
    A[57] = 0.0;
    A[58] = 0.0;
    A[59] = 0.0;
    A[60] = 0.0;
    A[61] = 0.0;
    A[62] = 0.0;
    A[63] = 0.0;
    A[64] = 0.0;
    A[65] = 0.0;
    A[66] = 0.166666666666668*G2_1_0 + 0.166666666666667*G2_1_1;
    A[67] = -0.166666666666668*G2_1_0;
    A[68] = 0.500000000000004*G2_1_1;
    A[69] = 0.66666666666667*G2_1_0;
    A[70] = -0.66666666666667*G2_1_0 - 0.66666666666667*G2_1_1;
    A[71] = 0.0;
    A[72] = -0.011111111111111*G0_;
    A[73] = 0.0;
    A[74] = 0.0;
    A[75] = 0.0888888888888891*G0_;
    A[76] = 0.0444444444444442*G0_;
    A[77] = 0.0444444444444442*G0_;
    A[78] = 0.0;
    A[79] = 0.0;
    A[80] = 0.0;
    A[81] = 0.0;
    A[82] = 0.0;
    A[83] = 0.0;
    A[84] = 0.0;
    A[85] = 0.0;
    A[86] = 0.0;
    A[87] = 0.0;
    A[88] = 0.0;
    A[89] = 0.0;
    A[90] = 0.0;
    A[91] = 0.666666666666667*G2_1_0;
    A[92] = 0.66666666666667*G2_0_1;
    A[93] = 1.33333333333333*G2_0_0 + 0.666666666666655*G2_0_1 + 0.666666666666655*G2_1_0 + 1.33333333333332*G2_1_1;
    A[94] = -1.33333333333333*G2_0_0 - 0.666666666666663*G2_0_1 - 0.666666666666655*G2_1_0;
    A[95] = -0.666666666666665*G2_0_1 - 0.66666666666667*G2_1_0 - 1.33333333333333*G2_1_1;
    A[96] = 0.0;
    A[97] = -0.0111111111111111*G0_;
    A[98] = 0.0;
    A[99] = 0.0444444444444442*G0_;
    A[100] = 0.0888888888888893*G0_;
    A[101] = 0.0444444444444442*G0_;
    A[102] = 0.0;
    A[103] = 0.0;
    A[104] = 0.0;
    A[105] = 0.0;
    A[106] = 0.0;
    A[107] = 0.0;
    A[108] = 0.0;
    A[109] = 0.0;
    A[110] = 0.0;
    A[111] = 0.0;
    A[112] = 0.0;
    A[113] = 0.0;
    A[114] = -0.666666666666673*G2_1_0 - 0.666666666666672*G2_1_1;
    A[115] = 0.0;
    A[116] = -0.66666666666667*G2_0_1 - 0.66666666666667*G2_1_1;
    A[117] = -1.33333333333333*G2_0_0 - 0.666666666666655*G2_0_1 - 0.666666666666663*G2_1_0;
    A[118] = 1.33333333333333*G2_0_0 + 0.666666666666663*G2_0_1 + 0.666666666666663*G2_1_0 + 1.33333333333334*G2_1_1;
    A[119] = 0.666666666666665*G2_0_1 + 0.666666666666671*G2_1_0;
    A[120] = 0.0;
    A[121] = 0.0;
    A[122] = -0.0111111111111111*G0_;
    A[123] = 0.0444444444444442*G0_;
    A[124] = 0.0444444444444442*G0_;
    A[125] = 0.0888888888888893*G0_;
    A[126] = 0.0;
    A[127] = 0.0;
    A[128] = 0.0;
    A[129] = 0.0;
    A[130] = 0.0;
    A[131] = 0.0;
    A[132] = 0.0;
    A[133] = 0.0;
    A[134] = 0.0;
    A[135] = 0.0;
    A[136] = 0.0;
    A[137] = 0.0;
    A[138] = -0.666666666666673*G2_0_0 - 0.666666666666672*G2_0_1;
    A[139] = -0.666666666666673*G2_0_0 - 0.66666666666667*G2_1_0;
    A[140] = 0.0;
    A[141] = -0.66666666666667*G2_0_1 - 0.666666666666665*G2_1_0 - 1.33333333333333*G2_1_1;
    A[142] = 0.666666666666671*G2_0_1 + 0.666666666666665*G2_1_0;
    A[143] = 1.33333333333335*G2_0_0 + 0.666666666666672*G2_0_1 + 0.666666666666672*G2_1_0 + 1.33333333333334*G2_1_1;
    A[144] = 0.0;
    A[145] = 0.0;
    A[146] = 0.0;
    A[147] = 0.0;
    A[148] = 0.0;
    A[149] = 0.0;
    A[150] = 0.0333333333333335*G12_;
    A[151] = -0.00555555555555561*G12_;
    A[152] = -0.00555555555555561*G12_;
    A[153] = -0.022222222222222*G12_;
    A[154] = 0.0;
    A[155] = 0.0;
    A[156] = 0.0;
    A[157] = 0.0;
    A[158] = 0.0;
    A[159] = 0.0;
    A[160] = 0.0;
    A[161] = 0.0;
    A[162] = 0.500000000000004*G3_0_0 + 0.500000000000004*G3_0_1 + 0.500000000000004*G3_1_0 + 0.500000000000005*G3_1_1 + 0.500000000000004*G4_0_0 + 0.500000000000004*G4_0_1 + 0.500000000000004*G4_1_0 + 0.500000000000005*G4_1_1;
    A[163] = 0.166666666666669*G3_0_0 + 0.166666666666668*G3_1_0 + 0.166666666666669*G4_0_0 + 0.166666666666668*G4_1_0;
    A[164] = 0.166666666666668*G3_0_1 + 0.166666666666667*G3_1_1 + 0.166666666666668*G4_0_1 + 0.166666666666667*G4_1_1;
    A[165] = 0.0;
    A[166] = -0.666666666666673*G3_0_1 - 0.666666666666672*G3_1_1 - 0.666666666666673*G4_0_1 - 0.666666666666672*G4_1_1;
    A[167] = -0.666666666666673*G3_0_0 - 0.666666666666672*G3_1_0 - 0.666666666666673*G4_0_0 - 0.666666666666672*G4_1_0;
    A[168] = 0.0;
    A[169] = 0.0;
    A[170] = 0.0;
    A[171] = 0.0;
    A[172] = 0.0;
    A[173] = 0.0;
    A[174] = -0.00555555555555561*G12_;
    A[175] = 0.0333333333333335*G12_;
    A[176] = -0.00555555555555559*G12_;
    A[177] = 0.0;
    A[178] = -0.0222222222222221*G12_;
    A[179] = 0.0;
    A[180] = 0.0;
    A[181] = 0.0;
    A[182] = 0.0;
    A[183] = 0.0;
    A[184] = 0.0;
    A[185] = 0.0;
    A[186] = 0.166666666666669*G3_0_0 + 0.166666666666668*G3_0_1 + 0.166666666666669*G4_0_0 + 0.166666666666668*G4_0_1;
    A[187] = 0.500000000000003*G3_0_0 + 0.500000000000003*G4_0_0;
    A[188] = -0.166666666666668*G3_0_1 - 0.166666666666668*G4_0_1;
    A[189] = 0.666666666666667*G3_0_1 + 0.666666666666667*G4_0_1;
    A[190] = 0.0;
    A[191] = -0.666666666666673*G3_0_0 - 0.66666666666667*G3_0_1 - 0.666666666666673*G4_0_0 - 0.66666666666667*G4_0_1;
    A[192] = 0.0;
    A[193] = 0.0;
    A[194] = 0.0;
    A[195] = 0.0;
    A[196] = 0.0;
    A[197] = 0.0;
    A[198] = -0.00555555555555561*G12_;
    A[199] = -0.00555555555555559*G12_;
    A[200] = 0.0333333333333335*G12_;
    A[201] = 0.0;
    A[202] = 0.0;
    A[203] = -0.0222222222222221*G12_;
    A[204] = 0.0;
    A[205] = 0.0;
    A[206] = 0.0;
    A[207] = 0.0;
    A[208] = 0.0;
    A[209] = 0.0;
    A[210] = 0.166666666666668*G3_1_0 + 0.166666666666667*G3_1_1 + 0.166666666666668*G4_1_0 + 0.166666666666667*G4_1_1;
    A[211] = -0.166666666666668*G3_1_0 - 0.166666666666668*G4_1_0;
    A[212] = 0.500000000000004*G3_1_1 + 0.500000000000004*G4_1_1;
    A[213] = 0.66666666666667*G3_1_0 + 0.66666666666667*G4_1_0;
    A[214] = -0.66666666666667*G3_1_0 - 0.66666666666667*G3_1_1 - 0.66666666666667*G4_1_0 - 0.66666666666667*G4_1_1;
    A[215] = 0.0;
    A[216] = 0.0;
    A[217] = 0.0;
    A[218] = 0.0;
    A[219] = 0.0;
    A[220] = 0.0;
    A[221] = 0.0;
    A[222] = -0.022222222222222*G12_;
    A[223] = 0.0;
    A[224] = 0.0;
    A[225] = 0.177777777777778*G12_;
    A[226] = 0.0888888888888883*G12_;
    A[227] = 0.0888888888888883*G12_;
    A[228] = 0.0;
    A[229] = 0.0;
    A[230] = 0.0;
    A[231] = 0.0;
    A[232] = 0.0;
    A[233] = 0.0;
    A[234] = 0.0;
    A[235] = 0.666666666666667*G3_1_0 + 0.666666666666667*G4_1_0;
    A[236] = 0.66666666666667*G3_0_1 + 0.66666666666667*G4_0_1;
    A[237] = 1.33333333333333*G3_0_0 + 0.666666666666655*G3_0_1 + 0.666666666666655*G3_1_0 + 1.33333333333332*G3_1_1 + 1.33333333333333*G4_0_0 + 0.666666666666655*G4_0_1 + 0.666666666666655*G4_1_0 + 1.33333333333332*G4_1_1;
    A[238] = -1.33333333333333*G3_0_0 - 0.666666666666663*G3_0_1 - 0.666666666666655*G3_1_0 - 1.33333333333333*G4_0_0 - 0.666666666666663*G4_0_1 - 0.666666666666655*G4_1_0;
    A[239] = -0.666666666666665*G3_0_1 - 0.66666666666667*G3_1_0 - 1.33333333333333*G3_1_1 - 0.666666666666665*G4_0_1 - 0.66666666666667*G4_1_0 - 1.33333333333333*G4_1_1;
    A[240] = 0.0;
    A[241] = 0.0;
    A[242] = 0.0;
    A[243] = 0.0;
    A[244] = 0.0;
    A[245] = 0.0;
    A[246] = 0.0;
    A[247] = -0.0222222222222221*G12_;
    A[248] = 0.0;
    A[249] = 0.0888888888888883*G12_;
    A[250] = 0.177777777777779*G12_;
    A[251] = 0.0888888888888884*G12_;
    A[252] = 0.0;
    A[253] = 0.0;
    A[254] = 0.0;
    A[255] = 0.0;
    A[256] = 0.0;
    A[257] = 0.0;
    A[258] = -0.666666666666673*G3_1_0 - 0.666666666666672*G3_1_1 - 0.666666666666673*G4_1_0 - 0.666666666666672*G4_1_1;
    A[259] = 0.0;
    A[260] = -0.66666666666667*G3_0_1 - 0.66666666666667*G3_1_1 - 0.66666666666667*G4_0_1 - 0.66666666666667*G4_1_1;
    A[261] = -1.33333333333333*G3_0_0 - 0.666666666666655*G3_0_1 - 0.666666666666663*G3_1_0 - 1.33333333333333*G4_0_0 - 0.666666666666655*G4_0_1 - 0.666666666666663*G4_1_0;
    A[262] = 1.33333333333333*G3_0_0 + 0.666666666666663*G3_0_1 + 0.666666666666663*G3_1_0 + 1.33333333333334*G3_1_1 + 1.33333333333333*G4_0_0 + 0.666666666666663*G4_0_1 + 0.666666666666663*G4_1_0 + 1.33333333333334*G4_1_1;
    A[263] = 0.666666666666665*G3_0_1 + 0.666666666666671*G3_1_0 + 0.666666666666665*G4_0_1 + 0.666666666666671*G4_1_0;
    A[264] = 0.0;
    A[265] = 0.0;
    A[266] = 0.0;
    A[267] = 0.0;
    A[268] = 0.0;
    A[269] = 0.0;
    A[270] = 0.0;
    A[271] = 0.0;
    A[272] = -0.0222222222222221*G12_;
    A[273] = 0.0888888888888883*G12_;
    A[274] = 0.0888888888888884*G12_;
    A[275] = 0.177777777777779*G12_;
    A[276] = 0.0;
    A[277] = 0.0;
    A[278] = 0.0;
    A[279] = 0.0;
    A[280] = 0.0;
    A[281] = 0.0;
    A[282] = -0.666666666666673*G3_0_0 - 0.666666666666672*G3_0_1 - 0.666666666666673*G4_0_0 - 0.666666666666672*G4_0_1;
    A[283] = -0.666666666666673*G3_0_0 - 0.66666666666667*G3_1_0 - 0.666666666666673*G4_0_0 - 0.66666666666667*G4_1_0;
    A[284] = 0.0;
    A[285] = -0.66666666666667*G3_0_1 - 0.666666666666665*G3_1_0 - 1.33333333333333*G3_1_1 - 0.66666666666667*G4_0_1 - 0.666666666666665*G4_1_0 - 1.33333333333333*G4_1_1;
    A[286] = 0.666666666666671*G3_0_1 + 0.666666666666665*G3_1_0 + 0.666666666666671*G4_0_1 + 0.666666666666665*G4_1_0;
    A[287] = 1.33333333333335*G3_0_0 + 0.666666666666672*G3_0_1 + 0.666666666666672*G3_1_0 + 1.33333333333334*G3_1_1 + 1.33333333333335*G4_0_0 + 0.666666666666672*G4_0_1 + 0.666666666666672*G4_1_0 + 1.33333333333334*G4_1_1;
    A[288] = 0.0;
    A[289] = 0.0;
    A[290] = 0.0;
    A[291] = 0.0;
    A[292] = 0.0;
    A[293] = 0.0;
    A[294] = 0.0;
    A[295] = 0.0;
    A[296] = 0.0;
    A[297] = 0.0;
    A[298] = 0.0;
    A[299] = 0.0;
    A[300] = 0.0166666666666668*G1_;
    A[301] = -0.0027777777777778*G1_;
    A[302] = -0.0027777777777778*G1_;
    A[303] = -0.011111111111111*G1_;
    A[304] = 0.0;
    A[305] = 0.0;
    A[306] = 0.500000000000004*G5_0_0 + 0.500000000000004*G5_0_1 + 0.500000000000004*G5_1_0 + 0.500000000000005*G5_1_1;
    A[307] = 0.166666666666669*G5_0_0 + 0.166666666666668*G5_1_0;
    A[308] = 0.166666666666668*G5_0_1 + 0.166666666666667*G5_1_1;
    A[309] = 0.0;
    A[310] = -0.666666666666673*G5_0_1 - 0.666666666666672*G5_1_1;
    A[311] = -0.666666666666673*G5_0_0 - 0.666666666666672*G5_1_0;
    A[312] = 0.0;
    A[313] = 0.0;
    A[314] = 0.0;
    A[315] = 0.0;
    A[316] = 0.0;
    A[317] = 0.0;
    A[318] = 0.0;
    A[319] = 0.0;
    A[320] = 0.0;
    A[321] = 0.0;
    A[322] = 0.0;
    A[323] = 0.0;
    A[324] = -0.00277777777777781*G1_;
    A[325] = 0.0166666666666668*G1_;
    A[326] = -0.00277777777777779*G1_;
    A[327] = 0.0;
    A[328] = -0.0111111111111111*G1_;
    A[329] = 0.0;
    A[330] = 0.166666666666669*G5_0_0 + 0.166666666666668*G5_0_1;
    A[331] = 0.500000000000003*G5_0_0;
    A[332] = -0.166666666666668*G5_0_1;
    A[333] = 0.666666666666667*G5_0_1;
    A[334] = 0.0;
    A[335] = -0.666666666666673*G5_0_0 - 0.66666666666667*G5_0_1;
    A[336] = 0.0;
    A[337] = 0.0;
    A[338] = 0.0;
    A[339] = 0.0;
    A[340] = 0.0;
    A[341] = 0.0;
    A[342] = 0.0;
    A[343] = 0.0;
    A[344] = 0.0;
    A[345] = 0.0;
    A[346] = 0.0;
    A[347] = 0.0;
    A[348] = -0.0027777777777778*G1_;
    A[349] = -0.00277777777777779*G1_;
    A[350] = 0.0166666666666668*G1_;
    A[351] = 0.0;
    A[352] = 0.0;
    A[353] = -0.0111111111111111*G1_;
    A[354] = 0.166666666666668*G5_1_0 + 0.166666666666667*G5_1_1;
    A[355] = -0.166666666666668*G5_1_0;
    A[356] = 0.500000000000004*G5_1_1;
    A[357] = 0.66666666666667*G5_1_0;
    A[358] = -0.66666666666667*G5_1_0 - 0.66666666666667*G5_1_1;
    A[359] = 0.0;
    A[360] = 0.0;
    A[361] = 0.0;
    A[362] = 0.0;
    A[363] = 0.0;
    A[364] = 0.0;
    A[365] = 0.0;
    A[366] = 0.0;
    A[367] = 0.0;
    A[368] = 0.0;
    A[369] = 0.0;
    A[370] = 0.0;
    A[371] = 0.0;
    A[372] = -0.011111111111111*G1_;
    A[373] = 0.0;
    A[374] = 0.0;
    A[375] = 0.0888888888888891*G1_;
    A[376] = 0.0444444444444442*G1_;
    A[377] = 0.0444444444444442*G1_;
    A[378] = 0.0;
    A[379] = 0.666666666666667*G5_1_0;
    A[380] = 0.66666666666667*G5_0_1;
    A[381] = 1.33333333333333*G5_0_0 + 0.666666666666655*G5_0_1 + 0.666666666666655*G5_1_0 + 1.33333333333332*G5_1_1;
    A[382] = -1.33333333333333*G5_0_0 - 0.666666666666663*G5_0_1 - 0.666666666666655*G5_1_0;
    A[383] = -0.666666666666665*G5_0_1 - 0.66666666666667*G5_1_0 - 1.33333333333333*G5_1_1;
    A[384] = 0.0;
    A[385] = 0.0;
    A[386] = 0.0;
    A[387] = 0.0;
    A[388] = 0.0;
    A[389] = 0.0;
    A[390] = 0.0;
    A[391] = 0.0;
    A[392] = 0.0;
    A[393] = 0.0;
    A[394] = 0.0;
    A[395] = 0.0;
    A[396] = 0.0;
    A[397] = -0.0111111111111111*G1_;
    A[398] = 0.0;
    A[399] = 0.0444444444444442*G1_;
    A[400] = 0.0888888888888893*G1_;
    A[401] = 0.0444444444444442*G1_;
    A[402] = -0.666666666666673*G5_1_0 - 0.666666666666672*G5_1_1;
    A[403] = 0.0;
    A[404] = -0.66666666666667*G5_0_1 - 0.66666666666667*G5_1_1;
    A[405] = -1.33333333333333*G5_0_0 - 0.666666666666655*G5_0_1 - 0.666666666666663*G5_1_0;
    A[406] = 1.33333333333333*G5_0_0 + 0.666666666666663*G5_0_1 + 0.666666666666663*G5_1_0 + 1.33333333333334*G5_1_1;
    A[407] = 0.666666666666665*G5_0_1 + 0.666666666666671*G5_1_0;
    A[408] = 0.0;
    A[409] = 0.0;
    A[410] = 0.0;
    A[411] = 0.0;
    A[412] = 0.0;
    A[413] = 0.0;
    A[414] = 0.0;
    A[415] = 0.0;
    A[416] = 0.0;
    A[417] = 0.0;
    A[418] = 0.0;
    A[419] = 0.0;
    A[420] = 0.0;
    A[421] = 0.0;
    A[422] = -0.0111111111111111*G1_;
    A[423] = 0.0444444444444442*G1_;
    A[424] = 0.0444444444444442*G1_;
    A[425] = 0.0888888888888893*G1_;
    A[426] = -0.666666666666673*G5_0_0 - 0.666666666666672*G5_0_1;
    A[427] = -0.666666666666673*G5_0_0 - 0.66666666666667*G5_1_0;
    A[428] = 0.0;
    A[429] = -0.66666666666667*G5_0_1 - 0.666666666666665*G5_1_0 - 1.33333333333333*G5_1_1;
    A[430] = 0.666666666666671*G5_0_1 + 0.666666666666665*G5_1_0;
    A[431] = 1.33333333333335*G5_0_0 + 0.666666666666672*G5_0_1 + 0.666666666666672*G5_1_0 + 1.33333333333334*G5_1_1;
    A[432] = 0.00714285714285721*G7_12 - 0.000793650793650796*G7_13 - 0.000793650793650796*G7_14 + 0.00158730158730157*G7_15 + 0.00476190476190478*G7_16 + 0.00476190476190478*G7_17 + 0.435179568074261*G8_0_0 + 0.435179568074262*G8_0_1 + 0.435179568074262*G8_1_0 + 0.435179568074262*G8_1_1;
    A[433] = -0.000793650793650796*G7_12 - 0.000793650793650795*G7_13 + 0.000396825396825395*G7_14 - 0.0015873015873016*G7_17 + 0.145059856024755*G8_0_0 + 0.145059856024754*G8_0_1;
    A[434] = -0.000793650793650796*G7_12 + 0.000396825396825395*G7_13 - 0.000793650793650795*G7_14 - 0.0015873015873016*G7_16 + 0.145059856024754*G8_1_0 + 0.145059856024753*G8_1_1;
    A[435] = 0.00158730158730157*G7_12 - 0.0063492063492063*G7_15 - 0.00317460317460314*G7_16 - 0.00317460317460314*G7_17;
    A[436] = 0.00476190476190478*G7_12 - 0.0015873015873016*G7_14 - 0.00317460317460314*G7_15 - 0.580239424099016*G8_1_0 - 0.580239424099016*G8_1_1;
    A[437] = 0.00476190476190478*G7_12 - 0.0015873015873016*G7_13 - 0.00317460317460314*G7_15 - 0.580239424099016*G8_0_0 - 0.580239424099015*G8_0_1;
    A[438] = 0.435179568074261*G9_0_0 + 0.435179568074262*G9_0_1 + 0.435179568074262*G9_1_0 + 0.435179568074262*G9_1_1 + 0.435179568074261*G10_0_0 + 0.435179568074262*G10_0_1 + 0.435179568074262*G10_1_0 + 0.435179568074262*G10_1_1 - 0.00714285714285721*G13_6 + 0.000793650793650796*G13_7 + 0.000793650793650796*G13_8 - 0.00158730158730157*G13_9 - 0.00476190476190478*G13_10 - 0.00476190476190478*G13_11 - 0.00714285714285721*G14_6 + 0.000793650793650796*G14_7 + 0.000793650793650796*G14_8 - 0.00158730158730157*G14_9 - 0.00476190476190478*G14_10 - 0.00476190476190478*G14_11;
    A[439] = 0.145059856024755*G9_0_0 + 0.145059856024754*G9_0_1 + 0.145059856024755*G10_0_0 + 0.145059856024754*G10_0_1 + 0.000793650793650796*G13_6 + 0.000793650793650795*G13_7 - 0.000396825396825395*G13_8 + 0.0015873015873016*G13_11 + 0.000793650793650796*G14_6 + 0.000793650793650795*G14_7 - 0.000396825396825395*G14_8 + 0.0015873015873016*G14_11;
    A[440] = 0.145059856024754*G9_1_0 + 0.145059856024753*G9_1_1 + 0.145059856024754*G10_1_0 + 0.145059856024753*G10_1_1 + 0.000793650793650796*G13_6 - 0.000396825396825395*G13_7 + 0.000793650793650795*G13_8 + 0.0015873015873016*G13_10 + 0.000793650793650796*G14_6 - 0.000396825396825395*G14_7 + 0.000793650793650795*G14_8 + 0.0015873015873016*G14_10;
    A[441] = -0.00158730158730157*G13_6 + 0.0063492063492063*G13_9 + 0.00317460317460314*G13_10 + 0.00317460317460314*G13_11 - 0.00158730158730157*G14_6 + 0.0063492063492063*G14_9 + 0.00317460317460314*G14_10 + 0.00317460317460314*G14_11;
    A[442] = -0.580239424099016*G9_1_0 - 0.580239424099016*G9_1_1 - 0.580239424099016*G10_1_0 - 0.580239424099016*G10_1_1 - 0.00476190476190478*G13_6 + 0.0015873015873016*G13_8 + 0.00317460317460314*G13_9 - 0.00476190476190478*G14_6 + 0.0015873015873016*G14_8 + 0.00317460317460314*G14_9;
    A[443] = -0.580239424099016*G9_0_0 - 0.580239424099015*G9_0_1 - 0.580239424099016*G10_0_0 - 0.580239424099015*G10_0_1 - 0.00476190476190478*G13_6 + 0.0015873015873016*G13_7 + 0.00317460317460314*G13_9 - 0.00476190476190478*G14_6 + 0.0015873015873016*G14_7 + 0.00317460317460314*G14_9;
    A[444] = 0.00714285714285721*G6_0 - 0.000793650793650796*G6_1 - 0.000793650793650796*G6_2 + 0.00158730158730157*G6_3 + 0.00476190476190478*G6_4 + 0.00476190476190478*G6_5 + 0.435179568074261*G11_0_0 + 0.435179568074262*G11_0_1 + 0.435179568074262*G11_1_0 + 0.435179568074262*G11_1_1;
    A[445] = -0.000793650793650796*G6_0 - 0.000793650793650795*G6_1 + 0.000396825396825395*G6_2 - 0.0015873015873016*G6_5 + 0.145059856024755*G11_0_0 + 0.145059856024754*G11_0_1;
    A[446] = -0.000793650793650796*G6_0 + 0.000396825396825395*G6_1 - 0.000793650793650795*G6_2 - 0.0015873015873016*G6_4 + 0.145059856024754*G11_1_0 + 0.145059856024753*G11_1_1;
    A[447] = 0.00158730158730157*G6_0 - 0.0063492063492063*G6_3 - 0.00317460317460314*G6_4 - 0.00317460317460314*G6_5;
    A[448] = 0.00476190476190478*G6_0 - 0.0015873015873016*G6_2 - 0.00317460317460314*G6_3 - 0.580239424099016*G11_1_0 - 0.580239424099016*G11_1_1;
    A[449] = 0.00476190476190478*G6_0 - 0.0015873015873016*G6_1 - 0.00317460317460314*G6_3 - 0.580239424099016*G11_0_0 - 0.580239424099015*G11_0_1;
    A[450] = 0.0;
    A[451] = 0.0;
    A[452] = 0.0;
    A[453] = 0.0;
    A[454] = 0.0;
    A[455] = 0.0;
    A[456] = -0.000793650793650796*G7_12 - 0.000793650793650795*G7_13 + 0.000396825396825395*G7_14 - 0.0015873015873016*G7_17 + 0.145059856024755*G8_0_0 + 0.145059856024754*G8_1_0;
    A[457] = -0.000793650793650795*G7_12 + 0.00714285714285721*G7_13 - 0.000793650793650796*G7_14 + 0.00476190476190478*G7_15 + 0.00158730158730158*G7_16 + 0.00476190476190478*G7_17 + 0.435179568074261*G8_0_0;
    A[458] = 0.000396825396825395*G7_12 - 0.000793650793650796*G7_13 - 0.000793650793650796*G7_14 - 0.0015873015873016*G7_15 - 0.145059856024754*G8_1_0;
    A[459] = 0.00476190476190478*G7_13 - 0.0015873015873016*G7_14 - 0.00317460317460315*G7_16 + 0.580239424099011*G8_1_0;
    A[460] = 0.00158730158730158*G7_13 - 0.00317460317460315*G7_15 - 0.00634920634920632*G7_16 - 0.00317460317460316*G7_17;
    A[461] = -0.0015873015873016*G7_12 + 0.00476190476190478*G7_13 - 0.00317460317460316*G7_16 - 0.580239424099016*G8_0_0 - 0.580239424099014*G8_1_0;
    A[462] = 0.145059856024755*G9_0_0 + 0.145059856024754*G9_1_0 + 0.145059856024755*G10_0_0 + 0.145059856024754*G10_1_0 + 0.000793650793650796*G13_6 + 0.000793650793650795*G13_7 - 0.000396825396825395*G13_8 + 0.0015873015873016*G13_11 + 0.000793650793650796*G14_6 + 0.000793650793650795*G14_7 - 0.000396825396825395*G14_8 + 0.0015873015873016*G14_11;
    A[463] = 0.435179568074261*G9_0_0 + 0.435179568074261*G10_0_0 + 0.000793650793650795*G13_6 - 0.00714285714285721*G13_7 + 0.000793650793650796*G13_8 - 0.00476190476190478*G13_9 - 0.00158730158730158*G13_10 - 0.00476190476190478*G13_11 + 0.000793650793650795*G14_6 - 0.00714285714285721*G14_7 + 0.000793650793650796*G14_8 - 0.00476190476190478*G14_9 - 0.00158730158730158*G14_10 - 0.00476190476190478*G14_11;
    A[464] = -0.145059856024754*G9_1_0 - 0.145059856024754*G10_1_0 - 0.000396825396825395*G13_6 + 0.000793650793650796*G13_7 + 0.000793650793650796*G13_8 + 0.0015873015873016*G13_9 - 0.000396825396825395*G14_6 + 0.000793650793650796*G14_7 + 0.000793650793650796*G14_8 + 0.0015873015873016*G14_9;
    A[465] = 0.580239424099011*G9_1_0 + 0.580239424099011*G10_1_0 - 0.00476190476190478*G13_7 + 0.0015873015873016*G13_8 + 0.00317460317460315*G13_10 - 0.00476190476190478*G14_7 + 0.0015873015873016*G14_8 + 0.00317460317460315*G14_10;
    A[466] = -0.00158730158730158*G13_7 + 0.00317460317460315*G13_9 + 0.00634920634920632*G13_10 + 0.00317460317460316*G13_11 - 0.00158730158730158*G14_7 + 0.00317460317460315*G14_9 + 0.00634920634920632*G14_10 + 0.00317460317460316*G14_11;
    A[467] = -0.580239424099016*G9_0_0 - 0.580239424099014*G9_1_0 - 0.580239424099016*G10_0_0 - 0.580239424099014*G10_1_0 + 0.0015873015873016*G13_6 - 0.00476190476190478*G13_7 + 0.00317460317460316*G13_10 + 0.0015873015873016*G14_6 - 0.00476190476190478*G14_7 + 0.00317460317460316*G14_10;
    A[468] = -0.000793650793650796*G6_0 - 0.000793650793650795*G6_1 + 0.000396825396825395*G6_2 - 0.0015873015873016*G6_5 + 0.145059856024755*G11_0_0 + 0.145059856024754*G11_1_0;
    A[469] = -0.000793650793650795*G6_0 + 0.00714285714285721*G6_1 - 0.000793650793650796*G6_2 + 0.00476190476190478*G6_3 + 0.00158730158730158*G6_4 + 0.00476190476190478*G6_5 + 0.435179568074261*G11_0_0;
    A[470] = 0.000396825396825395*G6_0 - 0.000793650793650796*G6_1 - 0.000793650793650796*G6_2 - 0.0015873015873016*G6_3 - 0.145059856024754*G11_1_0;
    A[471] = 0.00476190476190478*G6_1 - 0.0015873015873016*G6_2 - 0.00317460317460315*G6_4 + 0.580239424099011*G11_1_0;
    A[472] = 0.00158730158730158*G6_1 - 0.00317460317460315*G6_3 - 0.00634920634920632*G6_4 - 0.00317460317460316*G6_5;
    A[473] = -0.0015873015873016*G6_0 + 0.00476190476190478*G6_1 - 0.00317460317460316*G6_4 - 0.580239424099016*G11_0_0 - 0.580239424099014*G11_1_0;
    A[474] = 0.0;
    A[475] = 0.0;
    A[476] = 0.0;
    A[477] = 0.0;
    A[478] = 0.0;
    A[479] = 0.0;
    A[480] = -0.000793650793650796*G7_12 + 0.000396825396825395*G7_13 - 0.000793650793650795*G7_14 - 0.0015873015873016*G7_16 + 0.145059856024754*G8_0_1 + 0.145059856024753*G8_1_1;
    A[481] = 0.000396825396825395*G7_12 - 0.000793650793650796*G7_13 - 0.000793650793650796*G7_14 - 0.0015873015873016*G7_15 - 0.145059856024754*G8_0_1;
    A[482] = -0.000793650793650795*G7_12 - 0.000793650793650796*G7_13 + 0.00714285714285722*G7_14 + 0.00476190476190478*G7_15 + 0.00476190476190478*G7_16 + 0.00158730158730158*G7_17 + 0.435179568074262*G8_1_1;
    A[483] = -0.0015873015873016*G7_13 + 0.00476190476190478*G7_14 - 0.00317460317460315*G7_17 + 0.580239424099014*G8_0_1;
    A[484] = -0.0015873015873016*G7_12 + 0.00476190476190478*G7_14 - 0.00317460317460315*G7_17 - 0.580239424099014*G8_0_1 - 0.580239424099014*G8_1_1;
    A[485] = 0.00158730158730158*G7_14 - 0.00317460317460315*G7_15 - 0.00317460317460316*G7_16 - 0.00634920634920632*G7_17;
    A[486] = 0.145059856024754*G9_0_1 + 0.145059856024753*G9_1_1 + 0.145059856024754*G10_0_1 + 0.145059856024753*G10_1_1 + 0.000793650793650796*G13_6 - 0.000396825396825395*G13_7 + 0.000793650793650795*G13_8 + 0.0015873015873016*G13_10 + 0.000793650793650796*G14_6 - 0.000396825396825395*G14_7 + 0.000793650793650795*G14_8 + 0.0015873015873016*G14_10;
    A[487] = -0.145059856024754*G9_0_1 - 0.145059856024754*G10_0_1 - 0.000396825396825395*G13_6 + 0.000793650793650796*G13_7 + 0.000793650793650796*G13_8 + 0.0015873015873016*G13_9 - 0.000396825396825395*G14_6 + 0.000793650793650796*G14_7 + 0.000793650793650796*G14_8 + 0.0015873015873016*G14_9;
    A[488] = 0.435179568074262*G9_1_1 + 0.435179568074262*G10_1_1 + 0.000793650793650795*G13_6 + 0.000793650793650796*G13_7 - 0.00714285714285722*G13_8 - 0.00476190476190478*G13_9 - 0.00476190476190478*G13_10 - 0.00158730158730158*G13_11 + 0.000793650793650795*G14_6 + 0.000793650793650796*G14_7 - 0.00714285714285722*G14_8 - 0.00476190476190478*G14_9 - 0.00476190476190478*G14_10 - 0.00158730158730158*G14_11;
    A[489] = 0.580239424099014*G9_0_1 + 0.580239424099014*G10_0_1 + 0.0015873015873016*G13_7 - 0.00476190476190478*G13_8 + 0.00317460317460315*G13_11 + 0.0015873015873016*G14_7 - 0.00476190476190478*G14_8 + 0.00317460317460315*G14_11;
    A[490] = -0.580239424099014*G9_0_1 - 0.580239424099014*G9_1_1 - 0.580239424099014*G10_0_1 - 0.580239424099014*G10_1_1 + 0.0015873015873016*G13_6 - 0.00476190476190478*G13_8 + 0.00317460317460315*G13_11 + 0.0015873015873016*G14_6 - 0.00476190476190478*G14_8 + 0.00317460317460315*G14_11;
    A[491] = -0.00158730158730158*G13_8 + 0.00317460317460315*G13_9 + 0.00317460317460316*G13_10 + 0.00634920634920632*G13_11 - 0.00158730158730158*G14_8 + 0.00317460317460315*G14_9 + 0.00317460317460316*G14_10 + 0.00634920634920632*G14_11;
    A[492] = -0.000793650793650796*G6_0 + 0.000396825396825395*G6_1 - 0.000793650793650795*G6_2 - 0.0015873015873016*G6_4 + 0.145059856024754*G11_0_1 + 0.145059856024753*G11_1_1;
    A[493] = 0.000396825396825395*G6_0 - 0.000793650793650796*G6_1 - 0.000793650793650796*G6_2 - 0.0015873015873016*G6_3 - 0.145059856024754*G11_0_1;
    A[494] = -0.000793650793650795*G6_0 - 0.000793650793650796*G6_1 + 0.00714285714285722*G6_2 + 0.00476190476190478*G6_3 + 0.00476190476190478*G6_4 + 0.00158730158730158*G6_5 + 0.435179568074262*G11_1_1;
    A[495] = -0.0015873015873016*G6_1 + 0.00476190476190478*G6_2 - 0.00317460317460315*G6_5 + 0.580239424099014*G11_0_1;
    A[496] = -0.0015873015873016*G6_0 + 0.00476190476190478*G6_2 - 0.00317460317460316*G6_5 - 0.580239424099014*G11_0_1 - 0.580239424099014*G11_1_1;
    A[497] = 0.00158730158730158*G6_2 - 0.00317460317460315*G6_3 - 0.00317460317460315*G6_4 - 0.00634920634920632*G6_5;
    A[498] = 0.0;
    A[499] = 0.0;
    A[500] = 0.0;
    A[501] = 0.0;
    A[502] = 0.0;
    A[503] = 0.0;
    A[504] = 0.00158730158730157*G7_12 - 0.0063492063492063*G7_15 - 0.00317460317460314*G7_16 - 0.00317460317460314*G7_17;
    A[505] = 0.00476190476190478*G7_13 - 0.0015873015873016*G7_14 - 0.00317460317460315*G7_16 + 0.580239424099011*G8_0_1;
    A[506] = -0.0015873015873016*G7_13 + 0.00476190476190478*G7_14 - 0.00317460317460315*G7_17 + 0.580239424099014*G8_1_0;
    A[507] = -0.0063492063492063*G7_12 + 0.0571428571428575*G7_15 + 0.0190476190476189*G7_16 + 0.0190476190476189*G7_17 + 1.16047884819802*G8_0_0 + 0.580239424099001*G8_0_1 + 0.580239424099001*G8_1_0 + 1.16047884819801*G8_1_1;
    A[508] = -0.00317460317460314*G7_12 - 0.00317460317460315*G7_13 + 0.0190476190476189*G7_15 + 0.0190476190476189*G7_16 + 0.0126984126984126*G7_17 - 1.16047884819802*G8_0_0 - 0.580239424099001*G8_0_1 - 0.580239424099008*G8_1_0;
    A[509] = -0.00317460317460314*G7_12 - 0.00317460317460315*G7_14 + 0.0190476190476189*G7_15 + 0.0126984126984126*G7_16 + 0.0190476190476189*G7_17 - 0.580239424099014*G8_0_1 - 0.580239424099009*G8_1_0 - 1.16047884819802*G8_1_1;
    A[510] = -0.00158730158730157*G13_6 + 0.0063492063492063*G13_9 + 0.00317460317460314*G13_10 + 0.00317460317460314*G13_11 - 0.00158730158730157*G14_6 + 0.0063492063492063*G14_9 + 0.00317460317460314*G14_10 + 0.00317460317460314*G14_11;
    A[511] = 0.580239424099011*G9_0_1 + 0.580239424099011*G10_0_1 - 0.00476190476190478*G13_7 + 0.0015873015873016*G13_8 + 0.00317460317460315*G13_10 - 0.00476190476190478*G14_7 + 0.0015873015873016*G14_8 + 0.00317460317460315*G14_10;
    A[512] = 0.580239424099014*G9_1_0 + 0.580239424099014*G10_1_0 + 0.0015873015873016*G13_7 - 0.00476190476190478*G13_8 + 0.00317460317460315*G13_11 + 0.0015873015873016*G14_7 - 0.00476190476190478*G14_8 + 0.00317460317460315*G14_11;
    A[513] = 1.16047884819802*G9_0_0 + 0.580239424099001*G9_0_1 + 0.580239424099001*G9_1_0 + 1.16047884819801*G9_1_1 + 1.16047884819802*G10_0_0 + 0.580239424099001*G10_0_1 + 0.580239424099001*G10_1_0 + 1.16047884819801*G10_1_1 + 0.0063492063492063*G13_6 - 0.0571428571428575*G13_9 - 0.0190476190476189*G13_10 - 0.0190476190476189*G13_11 + 0.0063492063492063*G14_6 - 0.0571428571428575*G14_9 - 0.0190476190476189*G14_10 - 0.0190476190476189*G14_11;
    A[514] = -1.16047884819802*G9_0_0 - 0.580239424099001*G9_0_1 - 0.580239424099008*G9_1_0 - 1.16047884819802*G10_0_0 - 0.580239424099001*G10_0_1 - 0.580239424099008*G10_1_0 + 0.00317460317460314*G13_6 + 0.00317460317460315*G13_7 - 0.0190476190476189*G13_9 - 0.0190476190476189*G13_10 - 0.0126984126984126*G13_11 + 0.00317460317460314*G14_6 + 0.00317460317460315*G14_7 - 0.0190476190476189*G14_9 - 0.0190476190476189*G14_10 - 0.0126984126984126*G14_11;
    A[515] = -0.580239424099014*G9_0_1 - 0.580239424099009*G9_1_0 - 1.16047884819802*G9_1_1 - 0.580239424099014*G10_0_1 - 0.580239424099009*G10_1_0 - 1.16047884819802*G10_1_1 + 0.00317460317460314*G13_6 + 0.00317460317460315*G13_8 - 0.0190476190476189*G13_9 - 0.0126984126984126*G13_10 - 0.0190476190476189*G13_11 + 0.00317460317460314*G14_6 + 0.00317460317460315*G14_8 - 0.0190476190476189*G14_9 - 0.0126984126984126*G14_10 - 0.0190476190476189*G14_11;
    A[516] = 0.00158730158730157*G6_0 - 0.0063492063492063*G6_3 - 0.00317460317460314*G6_4 - 0.00317460317460314*G6_5;
    A[517] = 0.00476190476190478*G6_1 - 0.0015873015873016*G6_2 - 0.00317460317460315*G6_4 + 0.580239424099011*G11_0_1;
    A[518] = -0.0015873015873016*G6_1 + 0.00476190476190478*G6_2 - 0.00317460317460315*G6_5 + 0.580239424099014*G11_1_0;
    A[519] = -0.0063492063492063*G6_0 + 0.0571428571428575*G6_3 + 0.0190476190476189*G6_4 + 0.0190476190476189*G6_5 + 1.16047884819802*G11_0_0 + 0.580239424099001*G11_0_1 + 0.580239424099001*G11_1_0 + 1.16047884819801*G11_1_1;
    A[520] = -0.00317460317460314*G6_0 - 0.00317460317460315*G6_1 + 0.0190476190476189*G6_3 + 0.0190476190476189*G6_4 + 0.0126984126984126*G6_5 - 1.16047884819802*G11_0_0 - 0.580239424099001*G11_0_1 - 0.580239424099008*G11_1_0;
    A[521] = -0.00317460317460314*G6_0 - 0.00317460317460315*G6_2 + 0.0190476190476189*G6_3 + 0.0126984126984126*G6_4 + 0.0190476190476189*G6_5 - 0.580239424099014*G11_0_1 - 0.580239424099009*G11_1_0 - 1.16047884819802*G11_1_1;
    A[522] = 0.0;
    A[523] = 0.0;
    A[524] = 0.0;
    A[525] = 0.0;
    A[526] = 0.0;
    A[527] = 0.0;
    A[528] = 0.00476190476190478*G7_12 - 0.0015873015873016*G7_14 - 0.00317460317460314*G7_15 - 0.580239424099016*G8_0_1 - 0.580239424099016*G8_1_1;
    A[529] = 0.00158730158730158*G7_13 - 0.00317460317460315*G7_15 - 0.00634920634920632*G7_16 - 0.00317460317460316*G7_17;
    A[530] = -0.0015873015873016*G7_12 + 0.00476190476190478*G7_14 - 0.00317460317460316*G7_17 - 0.580239424099014*G8_1_0 - 0.580239424099014*G8_1_1;
    A[531] = -0.00317460317460314*G7_12 - 0.00317460317460315*G7_13 + 0.0190476190476189*G7_15 + 0.0190476190476189*G7_16 + 0.0126984126984126*G7_17 - 1.16047884819802*G8_0_0 - 0.580239424099008*G8_0_1 - 0.580239424099001*G8_1_0;
    A[532] = -0.00634920634920632*G7_13 + 0.0190476190476189*G7_15 + 0.0571428571428576*G7_16 + 0.019047619047619*G7_17 + 1.16047884819802*G8_0_0 + 0.580239424099008*G8_0_1 + 0.580239424099008*G8_1_0 + 1.16047884819803*G8_1_1;
    A[533] = -0.00317460317460316*G7_13 - 0.00317460317460316*G7_14 + 0.0126984126984126*G7_15 + 0.019047619047619*G7_16 + 0.019047619047619*G7_17 + 0.580239424099014*G8_0_1 + 0.580239424099009*G8_1_0;
    A[534] = -0.580239424099016*G9_0_1 - 0.580239424099016*G9_1_1 - 0.580239424099016*G10_0_1 - 0.580239424099016*G10_1_1 - 0.00476190476190478*G13_6 + 0.0015873015873016*G13_8 + 0.00317460317460314*G13_9 - 0.00476190476190478*G14_6 + 0.0015873015873016*G14_8 + 0.00317460317460314*G14_9;
    A[535] = -0.00158730158730158*G13_7 + 0.00317460317460315*G13_9 + 0.00634920634920632*G13_10 + 0.00317460317460316*G13_11 - 0.00158730158730158*G14_7 + 0.00317460317460315*G14_9 + 0.00634920634920632*G14_10 + 0.00317460317460316*G14_11;
    A[536] = -0.580239424099014*G9_1_0 - 0.580239424099014*G9_1_1 - 0.580239424099014*G10_1_0 - 0.580239424099014*G10_1_1 + 0.0015873015873016*G13_6 - 0.00476190476190478*G13_8 + 0.00317460317460316*G13_11 + 0.0015873015873016*G14_6 - 0.00476190476190478*G14_8 + 0.00317460317460316*G14_11;
    A[537] = -1.16047884819802*G9_0_0 - 0.580239424099008*G9_0_1 - 0.580239424099001*G9_1_0 - 1.16047884819802*G10_0_0 - 0.580239424099008*G10_0_1 - 0.580239424099001*G10_1_0 + 0.00317460317460314*G13_6 + 0.00317460317460315*G13_7 - 0.0190476190476189*G13_9 - 0.0190476190476189*G13_10 - 0.0126984126984126*G13_11 + 0.00317460317460314*G14_6 + 0.00317460317460315*G14_7 - 0.0190476190476189*G14_9 - 0.0190476190476189*G14_10 - 0.0126984126984126*G14_11;
    A[538] = 1.16047884819802*G9_0_0 + 0.580239424099008*G9_0_1 + 0.580239424099008*G9_1_0 + 1.16047884819803*G9_1_1 + 1.16047884819802*G10_0_0 + 0.580239424099008*G10_0_1 + 0.580239424099008*G10_1_0 + 1.16047884819803*G10_1_1 + 0.00634920634920632*G13_7 - 0.0190476190476189*G13_9 - 0.0571428571428576*G13_10 - 0.019047619047619*G13_11 + 0.00634920634920632*G14_7 - 0.0190476190476189*G14_9 - 0.0571428571428576*G14_10 - 0.019047619047619*G14_11;
    A[539] = 0.580239424099014*G9_0_1 + 0.580239424099009*G9_1_0 + 0.580239424099014*G10_0_1 + 0.580239424099009*G10_1_0 + 0.00317460317460316*G13_7 + 0.00317460317460316*G13_8 - 0.0126984126984126*G13_9 - 0.019047619047619*G13_10 - 0.019047619047619*G13_11 + 0.00317460317460316*G14_7 + 0.00317460317460316*G14_8 - 0.0126984126984126*G14_9 - 0.019047619047619*G14_10 - 0.019047619047619*G14_11;
    A[540] = 0.00476190476190478*G6_0 - 0.0015873015873016*G6_2 - 0.00317460317460314*G6_3 - 0.580239424099016*G11_0_1 - 0.580239424099016*G11_1_1;
    A[541] = 0.00158730158730158*G6_1 - 0.00317460317460315*G6_3 - 0.00634920634920632*G6_4 - 0.00317460317460316*G6_5;
    A[542] = -0.0015873015873016*G6_0 + 0.00476190476190478*G6_2 - 0.00317460317460316*G6_5 - 0.580239424099014*G11_1_0 - 0.580239424099014*G11_1_1;
    A[543] = -0.00317460317460314*G6_0 - 0.00317460317460315*G6_1 + 0.0190476190476189*G6_3 + 0.0190476190476189*G6_4 + 0.0126984126984126*G6_5 - 1.16047884819802*G11_0_0 - 0.580239424099008*G11_0_1 - 0.580239424099001*G11_1_0;
    A[544] = -0.00634920634920632*G6_1 + 0.0190476190476189*G6_3 + 0.0571428571428576*G6_4 + 0.019047619047619*G6_5 + 1.16047884819802*G11_0_0 + 0.580239424099008*G11_0_1 + 0.580239424099008*G11_1_0 + 1.16047884819803*G11_1_1;
    A[545] = -0.00317460317460316*G6_1 - 0.00317460317460316*G6_2 + 0.0126984126984126*G6_3 + 0.019047619047619*G6_4 + 0.019047619047619*G6_5 + 0.580239424099014*G11_0_1 + 0.580239424099009*G11_1_0;
    A[546] = 0.0;
    A[547] = 0.0;
    A[548] = 0.0;
    A[549] = 0.0;
    A[550] = 0.0;
    A[551] = 0.0;
    A[552] = 0.00476190476190478*G7_12 - 0.0015873015873016*G7_13 - 0.00317460317460314*G7_15 - 0.580239424099016*G8_0_0 - 0.580239424099015*G8_1_0;
    A[553] = -0.0015873015873016*G7_12 + 0.00476190476190478*G7_13 - 0.00317460317460316*G7_16 - 0.580239424099016*G8_0_0 - 0.580239424099014*G8_0_1;
    A[554] = 0.00158730158730158*G7_14 - 0.00317460317460315*G7_15 - 0.00317460317460316*G7_16 - 0.00634920634920632*G7_17;
    A[555] = -0.00317460317460314*G7_12 - 0.00317460317460315*G7_14 + 0.0190476190476189*G7_15 + 0.0126984126984126*G7_16 + 0.0190476190476189*G7_17 - 0.580239424099009*G8_0_1 - 0.580239424099014*G8_1_0 - 1.16047884819802*G8_1_1;
    A[556] = -0.00317460317460316*G7_13 - 0.00317460317460316*G7_14 + 0.0126984126984126*G7_15 + 0.019047619047619*G7_16 + 0.019047619047619*G7_17 + 0.580239424099009*G8_0_1 + 0.580239424099014*G8_1_0;
    A[557] = -0.00634920634920632*G7_14 + 0.0190476190476189*G7_15 + 0.019047619047619*G7_16 + 0.0571428571428576*G7_17 + 1.16047884819803*G8_0_0 + 0.580239424099015*G8_0_1 + 0.580239424099015*G8_1_0 + 1.16047884819803*G8_1_1;
    A[558] = -0.580239424099016*G9_0_0 - 0.580239424099015*G9_1_0 - 0.580239424099016*G10_0_0 - 0.580239424099015*G10_1_0 - 0.00476190476190478*G13_6 + 0.0015873015873016*G13_7 + 0.00317460317460314*G13_9 - 0.00476190476190478*G14_6 + 0.0015873015873016*G14_7 + 0.00317460317460314*G14_9;
    A[559] = -0.580239424099016*G9_0_0 - 0.580239424099014*G9_0_1 - 0.580239424099016*G10_0_0 - 0.580239424099014*G10_0_1 + 0.0015873015873016*G13_6 - 0.00476190476190478*G13_7 + 0.00317460317460316*G13_10 + 0.0015873015873016*G14_6 - 0.00476190476190478*G14_7 + 0.00317460317460316*G14_10;
    A[560] = -0.00158730158730158*G13_8 + 0.00317460317460315*G13_9 + 0.00317460317460316*G13_10 + 0.00634920634920632*G13_11 - 0.00158730158730158*G14_8 + 0.00317460317460315*G14_9 + 0.00317460317460316*G14_10 + 0.00634920634920632*G14_11;
    A[561] = -0.580239424099009*G9_0_1 - 0.580239424099014*G9_1_0 - 1.16047884819802*G9_1_1 - 0.580239424099009*G10_0_1 - 0.580239424099014*G10_1_0 - 1.16047884819802*G10_1_1 + 0.00317460317460314*G13_6 + 0.00317460317460315*G13_8 - 0.0190476190476189*G13_9 - 0.0126984126984126*G13_10 - 0.0190476190476189*G13_11 + 0.00317460317460314*G14_6 + 0.00317460317460315*G14_8 - 0.0190476190476189*G14_9 - 0.0126984126984126*G14_10 - 0.0190476190476189*G14_11;
    A[562] = 0.580239424099009*G9_0_1 + 0.580239424099014*G9_1_0 + 0.580239424099009*G10_0_1 + 0.580239424099014*G10_1_0 + 0.00317460317460316*G13_7 + 0.00317460317460316*G13_8 - 0.0126984126984126*G13_9 - 0.019047619047619*G13_10 - 0.019047619047619*G13_11 + 0.00317460317460316*G14_7 + 0.00317460317460316*G14_8 - 0.0126984126984126*G14_9 - 0.019047619047619*G14_10 - 0.019047619047619*G14_11;
    A[563] = 1.16047884819803*G9_0_0 + 0.580239424099015*G9_0_1 + 0.580239424099015*G9_1_0 + 1.16047884819803*G9_1_1 + 1.16047884819803*G10_0_0 + 0.580239424099015*G10_0_1 + 0.580239424099015*G10_1_0 + 1.16047884819803*G10_1_1 + 0.00634920634920632*G13_8 - 0.0190476190476189*G13_9 - 0.019047619047619*G13_10 - 0.0571428571428576*G13_11 + 0.00634920634920632*G14_8 - 0.0190476190476189*G14_9 - 0.019047619047619*G14_10 - 0.0571428571428576*G14_11;
    A[564] = 0.00476190476190478*G6_0 - 0.0015873015873016*G6_1 - 0.00317460317460314*G6_3 - 0.580239424099016*G11_0_0 - 0.580239424099015*G11_1_0;
    A[565] = -0.0015873015873016*G6_0 + 0.00476190476190478*G6_1 - 0.00317460317460316*G6_4 - 0.580239424099016*G11_0_0 - 0.580239424099014*G11_0_1;
    A[566] = 0.00158730158730158*G6_2 - 0.00317460317460315*G6_3 - 0.00317460317460316*G6_4 - 0.00634920634920632*G6_5;
    A[567] = -0.00317460317460314*G6_0 - 0.00317460317460315*G6_2 + 0.0190476190476189*G6_3 + 0.0126984126984126*G6_4 + 0.0190476190476189*G6_5 - 0.580239424099009*G11_0_1 - 0.580239424099014*G11_1_0 - 1.16047884819802*G11_1_1;
    A[568] = -0.00317460317460316*G6_1 - 0.00317460317460316*G6_2 + 0.0126984126984126*G6_3 + 0.019047619047619*G6_4 + 0.019047619047619*G6_5 + 0.580239424099009*G11_0_1 + 0.580239424099014*G11_1_0;
    A[569] = -0.00634920634920632*G6_2 + 0.0190476190476189*G6_3 + 0.019047619047619*G6_4 + 0.0571428571428576*G6_5 + 1.16047884819803*G11_0_0 + 0.580239424099015*G11_0_1 + 0.580239424099015*G11_1_0 + 1.16047884819803*G11_1_1;
    A[570] = 0.0;
    A[571] = 0.0;
    A[572] = 0.0;
    A[573] = 0.0;
    A[574] = 0.0;
    A[575] = 0.0;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "abd15d64fc6a0012f7460f6ed125827292a85f209dbecf77e96d034bb8a568735fb7c7ddb64248a66c52feb2e7662193094e555904ac77291623c92a4a0c9fde";
  }


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 1;
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({3});
    return position[i];
  }


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_1();
        break;
      }
    case 1:
      {
        return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_1();
        break;
      }
    case 2:
      {
        return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_1();
        break;
      }
    case 1:
      {
        return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_1();
        break;
      }
    case 2:
      {
        return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_dofmap_1();
        break;
      }
    }
    
    return 0;
  }


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const
  {
    return 0;
  }


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }


  /// Create a new cell integral on sub domain subdomain_id
  virtual ufc::cell_integral* create_cell_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain subdomain_id
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain subdomain_id
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new vertex integral on sub domain subdomain_id
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain subdomain_id
  virtual ufc::custom_integral* create_custom_integral(std::size_t subdomain_id) const
  {
    return 0;
  }


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new ffc_form_d32cef01bdf1e8ee8811c5cd055d58c80b4a5a4a_cell_integral_0_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

#endif
